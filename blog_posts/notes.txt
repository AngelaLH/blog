2017-06-10

Id: b4u68hcvj43jdajdsuo0

#idea Build a web service that builds google sitemaps (https://support.google.com/webmasters/answer/183668?hl=en&ref_topic=4581190). It crawls the website and builds .xml or .txt file with links, describes how to submit it to google etc. It should use chrome headless.

It should aggressively cache the results to avoid re-crawling websites. Url should be /tools/build-submit-google-sitemap.html. Maybe use a domain like webtools.io/build-submit-google-sitemap.html

To make money limit web service to N links (100? 256?) and up-sell a $10-$30 windows/mac desktop app build on electron.

---

Id: b4u6894vj43jdajdsung
Title: Summary of Founders Battle Virtual Talks #7 about SEO with Michael Schwarz

#seo #watched https://www.youtube.com/watch?v=R29ypgkXHVw
Insights:
* 70% vistors come from search engines, 96% of those are from google
* 8 SEO must-haves for a website:
 * title tags
 * meta description
 * headings (h1)
 * URL
 * create unique landing pages
 * optimize alt & title image tags
 * choose the right CMS
 * create sitemaps

* 2 SEO nice-haves
 * rich snippets
 * link building

Page title is important ranking factor and is shown in search result.

Meta Description is shown in Google Search, so its quality can improve click-through from search results.

h1 is important ranking factor.

url is important ranking factor.

Google likes to rank one page for keyword, so if you target multiple keywords, you should have multiple page, each page targeting different keywords.

Don't try to optimize a single page for too many keywords.

Alt & title for image tags is important for ranking in image search.

Good CMS (e.g. WordPress) allows you to set those important things (page title, meta description etc.)

Sitemap is an xml or text file that lists pages on your website. You submit a sitemap to Google to help it index the website. More info: https://support.google.com/webmasters/answer/183668?hl=en&ref_topic=4581190

Rich snippets don't apply for everything but for e.g. review sites, you can add ranking for a given item that will be shown in search results.

Link building is tricky. You want your website to be linked from other high-ranking websites. But if you use shady tactics like buying links then Google doesn't like it and might penalize your website.

---
Id: b4u67n4vj43jdajdsun0

#did

* show day of the note in /dailynotes on blog
* added unique ids to daily notes
* wrote /tools/generate-unique-id so that I can easily get unique ids for daily notes
* handle Id: and Title: metadata for daily notes

2017-06-09

Id: b4u67ksvj43jdajdsumg
#read https://www.indiehackers.com/businesses/intrinio #business #startups

---
Id: b4u67isvj43jdajdsum0

#read http://floooh.github.io/2017/06/09/webassembly-demystified.html #webassembly

---
Id: b4u67bcvj43jdajdsul0
Title: Go is Moneyball For Programming Languages

#go Go is a controversial language, often criticized for lack of sophistication. "We know how to do things better!".

I think of Go as Moneyball For Programming Languages: How to get maximum capability from minimal feature set.

Go makes much more sense when you look at it through "biggest bang for the buck" prism.

Go ruthlessly eliminates duplicate features and non-critical .

Enums? Can be replaced by idealized integers.

do/while loops? Can be replaced by slightly extended for.

Generics? You get the most common generic types built-in (slices and maps) but no user-defined generics.

Unit testing, benchmarking? You get that as part of standard library but it's ridiculusly minimal compared to, say, jUnit from Java world.

---
Id: b4u674cvj43jdajdsukg
Title: Summary of "The Mom Test" book about validating business ideas

#business #startups

"The Mom Test" (http://momtestbook.com/) is a very good book about how to validate business idea.

If you can't read or don't want to spend $10, the author also gave a few talks that cover the same ground and you can watch for free:
* https://www.youtube.com/watch?v=IuXhNJ3M_iM "PODIM 2014, Robert Fitzpatrick: Customer Development"
* https://www.youtube.com/watch?v=w4L0ZU7hMH4 "Rob Fitzpatrick - Getting Customer Development Right - Pioneers Festival 2012"
* https://www.youtube.com/watch?v=0LwbFZkyRKk "Rob Fitzpatrick - How to Learn from Customers When Everyone is Lying to You"
* https://www.youtube.com/watch?v=AFo2yQuqEsk "Rob Fitzpatrick @ Leanconf 2013 Keynote"
* https://www.youtube.com/watch?v=vqHR7CUPVbA&t=923s "Founders Battle - Virtual Talk #2 - Rob Fitzpatrick: "The mom test"
* https://www.youtube.com/watch?v=O_xjb7LB7VY "Rob Fitzpatrick - Prototyping Everything"
* https://www.youtube.com/watch?v=6PqpM4QM1JM "Idea Validation with Rob Fitzpatrick of dex.io [Blueprint Entrepreneur]"

Here's my summary, for the lazy.

So you have an idea for a software product/business. How to make sure that people want it?

Here are typical ways to do it:
* describe the idea, ask for feedback. Ask queations like "what do you think?", "would you buy it?"
* create a landing page, describe the product, collect e-mail addresses to guess-estimate the interest

Asking for feedback is bad because people are nice, they don't want to hurt your feelings so they'll either lie to you or will be way too optimistic about their interest in the product.

Rob talks about how to talk to people so that you get more accurate reading of their real interest.

It's best described as an example.

Let's say you want to do a cookbook app for iPad. You see that your mom has lots of cookbooks, so you interview her to validate the idea.

Here's how *not* to drive the conversation:

you > Hey mom, I have an idea for an coookbook app for an iPad.
mom > That sounds interesting. Tell me more. (thinking to herself: I've been cooking for 40 years, I don't need another cookbook)
you > It'll be $40, it'll have pictures for every recipe, you'll be able to share the recipies with friends and family, it'll have detailed instructions, a built in timer.
mom > That's great honey, I'm proud of you. Go for it.

Here's a better way:
you > Hey mom, I see you have an iPad. What are you using it for?
mom > Reading web, email, sometimes I'll download an app, like sudoku.
you > So how do you decide to buy an app.
mom > There's an app review section in the newspaper.
you > I noticed you have a lot of cookbooks. When was the last time you bought a cookbook?
mom > Oh, I've book cooking for 40 years, I don't need cookbooks. Those are mostly gifts.
you > So, you've never buy cookbooks?
mom > Come to think of it, I did buy a vegeterian cookbook because I want to improve my diet and I wanted to learn how to make vegetables more tasty.

In the first conversation potential customer lies because you're asking about hypotheticals.

In the second conversation you didn't even mention your idea but you asked about current behavior and you've learned that this particular person:
* is not a good customer for a basic cookbook
* they learn about new apps from the newspaper, so that would be a good place to advertise to reach them
* they might be interested in "niche" cookbook (vegeterian, popular ethnic trends)

---
Id: b4u671kvj43jdajdsuk0

Digital footprints:
* https://github.com/sumatrapdfreader/sumatrapdf/pull/826
* http://discuss.bootstrapped.fm/t/is-anyone-paying-for-seo-help-how-do-you-find-someone-who-is-doing-it-the-right-way-and-getting-results/1630/19?u=kjk

---
Id: b4u66vkvj43jdajdsujg

#did
* implemented individual note view for notes
* added support for code syntax highlighting for notes

---
Id: b4u66n4vj43jdajdsuj0
Title: remove duplicate strings from array, in Go

#go #snippet

```go
// RemoveDuplicateStrings removes duplicate strings from an array of strings.
// It's optimized for the case of no duplicates. It modifes a in place.
func RemoveDuplicateStrings(a []string) []string {
	if len(a) < 2 {
		return a
	}
	sort.Strings(a)
	writeIdx := 1
	for i := 1; i < len(a); i++ {
		if a[i-1] == a[i] {
			continue
		}
		if writeIdx != i {
			a[writeIdx] = a[i]
		}
		writeIdx++
	}
	return a[:writeIdx]
}
```

---
Id: b4u66i4vj43jdajdsui0

#read #systemd #go
https://tailordev.fr/blog/2017/06/09/deploying-a-go-app-with-systemd-socket-activation/
How to use systemd socket activation for for zero-downtime deployments

2017-06-08

Id: b4u66ksvj43jdajdsuig
#read http://www.kalzumeus.com/2008/01/28/why-you-shouldnt-pay-any-seo-you-can-afford/ #seo

---
Id: b4u66ccvj43jdajdsuhg

#flexbox #css

To implement layout: [[left]     [right]]:

div style=display:flex;flex-direction: row;justify-content: space-between;
  div
    left
  div
    right

---
Id: b4u66asvj43jdajdsuh0

Sciter (https://sciter.com/) is a tool for writing desktop UI quickly. It's like Electron but much smaller (5-8 MB vs. hundrends of megabytes). It's almost HTML and almost JavaScript.

It's also under-documented. Here's how I started playing with it:
* downloaded SDK (https://sciter.com/download/) into ~/Downloads folder and unzip
* create alias for the test app: alias sciter='/Users/kjk/Downloads/sciter-sdk/bin.osx/scapp'
* added the above alias to ~/.bash_profile

When I'm prototyping:
* create app.html and write the code
* to run: sciter app.html

Given how poorly documented Sciter is, I mostly use samples/ from the SDK to learn how do interesting things.

Ultimately the idea is that you use sciter .dll as part of your native Windows (C++ or .NET) or Mac (Objective-C or Swift), with majority of the interface implemented in Sciter's dialect of HTML/JavaScript, exposing functionality from native code as tiscript code.

Using scapp is a way to quickly prototype UI.

#sciter

---
Id: b4u669kvj43jdajdsugg
#go #did Implemented worklog for blog.

---
Id: b4u667svj43jdajdsug0
Reading more blog posts from http://thestartuptoolkit.com/.

Insight: if your business is "better X", you should use X to make sure you're really improving on it. http://thestartuptoolkit.com/blog/2011/09/use-the-tools-youre-displacing/

#business

---
Id: b4u666cvj43jdajdsufg
#read https://blog.figma.com/webassembly-cut-figmas-load-time-by-3x-76f3f2395164.
Summary: compared to asm.js, webassembly loads much faster, parses faster and executes slightly faster. #webassembly

---
Id: b4u664cvj43jdajdsuf0
#postgres http://www.craigkerstiens.com/2017/06/08/working-with-time-in-postgres/

---
Id: b4u6624vj43jdajdsueg
Title: Idea for faster PDF rendering

#idea

For faster PDF rendering, re-compile it. PDF format is rather complicated, mostly text format. A PDF renderer first has to parse it into in-memory representation and then renders it.

Imagine a binary format that is designed for fast loading and one-time PDF => binary format compilation step. With the right format, parsing step could essentially be eliminated.

We could even improve rendering time with some additional optimizations.

For example, there are PDF documents with gigantic images (think 4000 x 4000 pixels) that could be resized to some reasonable value and saved in a format that is fastest to decode.

I'm sure there are optimizations possible for complex vector graphics (e.g. removing stuff that we know will be invisible).
---

Id: b4u65tsvj43jdajdsue0

#watched https://vimeo.com/77265280, trying to understand capabilities of WebRTC. I want to build VNC client in the browser but without ability to open tcp/udp connections it's not possible. And for local machines it's not possible even when using a proxy server (website talks to a proxy, proxy talks to VNC server and tunnels the data to website).

---

Id: b4u65rkvj43jdajdsudg

#inspiration "Every day for years, Trollope reported in his “Autobiography,” he woke in darkness and wrote from 5:30 a.m. to 8:30 a.m., with his watch in front of him." (http://www.newyorker.com/magazine/2004/06/14/blocked). If I was able to do coding like this, I would have written many more programs than I have.

---
Id: b4u65ocvj43jdajdsucg

Digital footprints:
* http://discuss.bootstrapped.fm/t/advice-on-getting-free-users-to-pay-for-a-pro-option-of-a-product/5084/3?u=kjk
* https://www.indiehackers.com/forum/post/-Km7Y53UZUwjvKGZECh6?commentId=-Km7xYYmTwQJPBGQwFQo
* https://github.com/kurin/blazer/issues/17

2017-06-07

Id: b4u65l4vj43jdajdsuc0
#go #did

Mostly finished local drive -> backblaze backup tool in Go. Backblaze is much cheaper at storage and bandwidth than S3 or Google Storage.

It's content-addressable store so I never re-upload files.

High-level architecture of the backup tool:
* you provide a directory to backup and list of extensions to backup (it's not a generic backup tool but a way to backup documents)
* the program traverses the directory recursively
* if a file has the right extension, calculate its sha1
* name of the file in backblaze is based on sha1 so it's O(1) to check if it's already there, in which case we skip the upload

Since the program is meant to be run many times over the same directories, I needed few tricks to make it faster:
* to avoid re-calculating sha1 of the file across the runs, I store previously calculated sha1 in a .csv "database". It's small enough that I can load existing database in memory on startup and update it by appending to .csv file as I calculate new sha1
* to speed up "is the file already there" check, I list all files in backblaze on startup, which gives me info about 1000 files per HTTP request (compared to more naive way of checking each file individually, which would require HTTP call for each file)

Go library I used for backblaze API had small bugs and inefficiencies, but the author fixed them (https://github.com/kurin/blazer/issues/16, https://github.com/kurin/blazer/issues/13, https://github.com/kurin/blazer/issues/14) within hours of reporting. Kudos because it's rare.

Also started on a very simple web front-end for listing the files. https://vuejs.org is great as a simple template library (have data -> render some html based on that). I know that Vue.js is much more than that, but it's perfect for simple templating as well. In the past I would laboriously create html as text in JavaScript or use some simple templating like mustache.

---
Id: b4u65fsvj43jdajdsubg

Playing a bit with https://sciter.com (trying to build a UI version of https://github.com/jonas/tig). Sciter is very promising in the sense of allowing to build UI quickly. However, it's badly documented. Good thing it has lots of examples in the SDK. #sciter #did
